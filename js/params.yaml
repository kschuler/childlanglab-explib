# ---------------- SETUP PARAMETER -----------------#

setup:
    # The 1st item is 0, it means the 1st mole will pop up from the 1st hole.
    # and second mole will pop up from the second hole.
   wholeSeq: [0,1,1,1,0]
   # The sequence pattern that you want to replay.
   testSeqs: [[0,1],[1,0]]
   # Each pair represents the position of a hole. It consists of the distance to top and left boundary.
   positions: [ 30,400,  30,900 ] 
    # The max number of blocks(repeat sequence)
   blockNum: 2 
    # Time between each mole-movement in miliseconds.
   popGap: 500
    # rest time between each block.
   restTime: 1000
    # Tag to filter the data in exposure part.
   trailTag: 'trail'
    # Tag to filter the data in test part.
   testTag: 'test'
    # Add some other HTML elements.
   basicHTML: >
       <audio src="sounds/bonk.WAV"></audio>
   CSSHTML: >
        
   videoHTML: >

        <video id="myVideo" class="video-js vjs-default-skin"></video>
        <script>
        var videoMaxLengthInSeconds = 120;

        // Inialize the video player
        var player = videojs("myVideo", {
            controls: true,
            width: 720,
            height: 480,
            fluid: false,
            plugins: {
                record: {
                    audio: true,
                    video: true,
                    maxLength: videoMaxLengthInSeconds,
                    debug: true,
                    videoMimeType: "video/webm;codecs=H264"
                }
            }
        }, function(){
            // print version information at startup
            videojs.log(
                'Using video.js', videojs.VERSION,
                'with videojs-record', videojs.getPluginVersion('record'),
                'and recordrtc', RecordRTC.version
            );
        });

        // error handling for getUserMedia
        player.on('deviceError', function() {
            console.log('device error:', player.deviceErrorCode);
        });

        // Handle error events of the video player
        player.on('error', function(error) {
            console.log('error:', error);
        });

        // user clicked the record button and started recording !
        player.on('startRecord', function() {
            console.log('started recording! Do whatever you need to');
        });

            
        // user completed recording and stream is available
        player.on('finishRecord', function() {
            // the blob object contains the recorded data that
            // can be downloaded by the user, stored on server etc.
            console.log('finished recording: ', player.recordedData);

            // Create an instance of FormData and append the video parameter that
            // will be interpreted in the server as a file
            var formData = new FormData();
            formData.append('video', player.recordedData.video);

            // Execute the ajax request, in this case we have a very simple PHP script
            // that accepts and save the uploaded "video" file
            xhr('./upload-video.php', formData, function (fName) {
                console.log("Video succesfully uploaded !");
            });

            // Helper function to send 
            function xhr(url, data, callback) {
                var request = new XMLHttpRequest();
                request.onreadystatechange = function () {
                    if (request.readyState == 4 && request.status == 200) {
                        callback(location.href + request.responseText);
                    }
                };
                request.open('POST', url);
                request.send(data);
            }
        });
        </script>

#-----------------  MESSAGE ------------------#
message:
    beginMessage: "Welcome to Whack-a-mole. Press any key to begin!"
    endMessage: "You did a great job! Take a Rest!"
     



